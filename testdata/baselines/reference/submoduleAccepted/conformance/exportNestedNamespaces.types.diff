--- old.exportNestedNamespaces.types
+++ new.exportNestedNamespaces.types
@@= skipped -1, +1 lines =@@

 === mod.js ===
 exports.n = {};
->exports.n = {} : typeof n
->exports.n : typeof n
+>exports.n = {} : {}
+>exports.n : {}
 >exports : typeof import("mod")
->n : typeof n
+>n : {}
 >{} : {}

 exports.n.K = function () {
->exports.n.K = function () {    this.x = 10;} : typeof K
->exports.n.K : typeof K
->exports.n : typeof n
+>exports.n.K = function () {    this.x = 10;} : () => void
+>exports.n.K : any
+>exports.n : {}
 >exports : typeof import("mod")
->n : typeof n
->K : typeof K
->function () {    this.x = 10;} : typeof K
+>n : {}
+>K : any
+>function () {    this.x = 10;} : () => void

     this.x = 10;
 >this.x = 10 : 10
 >this.x : any
->this : this
+>this : any
 >x : any
 >10 : 10
 }
 exports.Classic = class {
 >exports.Classic = class {    constructor() {        this.p = 1    }} : typeof Classic
->exports.Classic : typeof Classic
+>exports.Classic : typeof (Anonymous class)
 >exports : typeof import("mod")
->Classic : typeof Classic
+>Classic : typeof (Anonymous class)
 >class {    constructor() {        this.p = 1    }} : typeof Classic

     constructor() {
         this.p = 1
 >this.p = 1 : 1
->this.p : any
+>this.p : number
 >this : this
->p : any
+>p : number
 >1 : 1
     }
 }

 === use.js ===
 import * as s from './mod'
->s : typeof s
+>s : typeof import("mod")

 var k = new s.n.K()
->k : K
->new s.n.K() : K
->s.n.K : typeof K
->s.n : typeof s.n
->s : typeof s
->n : typeof s.n
->K : typeof K
+>k : any
+>new s.n.K() : any
+>s.n.K : any
+>s.n : {}
+>s : typeof import("mod")
+>n : {}
+>K : any

 k.x
->k.x : number
->k : K
->x : number
+>k.x : any
+>k : any
+>x : any

 var classic = new s.Classic()
->classic : s.Classic
->new s.Classic() : s.Classic
->s.Classic : typeof s.Classic
->s : typeof s
->Classic : typeof s.Classic
+>classic : (Anonymous class)
+>new s.Classic() : (Anonymous class)
+>s.Classic : typeof (Anonymous class)
+>s : typeof import("mod")
+>Classic : typeof (Anonymous class)


 /** @param {s.n.K} c
     @param {s.Classic} classic */
 function f(c, classic) {
->f : (c: K, classic: s.Classic) => void
+>f : (c: K, classic: Classic) => void
 >c : K
->classic : s.Classic
+>classic : Classic

     c.x
->c.x : number
+>c.x : any
 >c : K
->x : number
+>x : any

     classic.p
->classic.p : number
->classic : s.Classic
->p : number
+>classic.p : any
+>classic : Classic
+>p : any
 }

